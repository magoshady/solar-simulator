{"ast":null,"code":"var _jsxFileName = \"/Users/rodrigocandi/solar-simulator/src/App.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport './App.css';\n\n// Define constants\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst SUNRISE = 6.0; // 6:00 AM\nconst SUNSET = 18.0; // 6:00 PM\nconst PEAK_TIME = 12.5; // 12:30 PM\nconst SIGMA = 2.5; // Controls width of bell curve (in hours)\n\nconst BASE_LOAD = 1.0; // kW base house load\nconst FRIDGE_LOAD = 0.1; // kW, always on\nconst APPLIANCE_LOADS = {\n  TV: 0.1,\n  Oven: 2.0,\n  Aircon: 1.5\n};\n\n// Solar production function (in kW) using a bell curve\nfunction solarProduction(t, inverterCapacity) {\n  // Solar production only between sunrise and sunset\n  if (t < SUNRISE || t > SUNSET) {\n    return 0;\n  }\n  const production = inverterCapacity * Math.exp(-Math.pow(t - PEAK_TIME, 2) / (2 * Math.pow(SIGMA, 2)));\n  return production;\n}\n\n// Simulate the day from t=0 to t=timeOfDay using simple integration\n// Battery starts full. We integrate energy (in kWh) in steps of dt.\nfunction simulateDay(timeOfDay, inverterCapacity, batteryCapacity, appliancesState) {\n  const dt = 0.1; // time step in hours (~6 minutes)\n  let batteryEnergy = batteryCapacity; // kWh (starts full, i.e. 100% SoC)\n  let cumulativeGridImport = 0; // kWh (if battery cannot cover deficit)\n  let cumulativeGridExport = 0; // kWh (excess production when battery is full)\n\n  // Step through time from 0 to current time\n  for (let t = 0; t < timeOfDay; t += dt) {\n    // Calculate load at time t:\n    // Base load + always-on fridge + toggled appliances\n    let load = BASE_LOAD + FRIDGE_LOAD;\n    if (appliancesState.TV) load += APPLIANCE_LOADS.TV;\n    if (appliancesState.Oven) load += APPLIANCE_LOADS.Oven;\n    if (appliancesState.Aircon) load += APPLIANCE_LOADS.Aircon;\n\n    // Get solar production at time t\n    const solar = solarProduction(t, inverterCapacity);\n    const netPower = solar - load; // kW (positive means excess solar)\n\n    if (netPower >= 0) {\n      // Excess solar: battery charges, and any extra is exported to the grid\n      const energyExcess = netPower * dt; // kWh available for charging\n      const availableCapacity = batteryCapacity - batteryEnergy;\n      const energyToBattery = Math.min(energyExcess, availableCapacity);\n      batteryEnergy += energyToBattery;\n      const energyExported = energyExcess - energyToBattery;\n      cumulativeGridExport += energyExported;\n    } else {\n      // Deficit: battery discharges to cover load\n      const deficitEnergy = -netPower * dt; // kWh required\n      const maxDischargeEnergy = 5 * dt; // kWh maximum that can be discharged in this dt (5 kW cap)\n      const energyFromBattery = Math.min(deficitEnergy, batteryEnergy, maxDischargeEnergy);\n      batteryEnergy -= energyFromBattery;\n      const energyShortfall = deficitEnergy - energyFromBattery;\n      cumulativeGridImport += energyShortfall;\n    }\n  }\n\n  // Calculate battery State of Charge (SoC) as a percentage\n  const batterySoC = batteryEnergy / batteryCapacity * 100;\n\n  // Calculate instantaneous values at the selected time-of-day:\n  let currentLoad = BASE_LOAD + FRIDGE_LOAD;\n  if (appliancesState.TV) currentLoad += APPLIANCE_LOADS.TV;\n  if (appliancesState.Oven) currentLoad += APPLIANCE_LOADS.Oven;\n  if (appliancesState.Aircon) currentLoad += APPLIANCE_LOADS.Aircon;\n  const currentSolar = solarProduction(timeOfDay, inverterCapacity);\n  return {\n    batterySoC,\n    batteryEnergy,\n    cumulativeGridImport,\n    cumulativeGridExport,\n    currentLoad,\n    currentSolar\n  };\n}\nfunction App() {\n  _s();\n  // State variables for inverter capacity (kW) and battery capacity (kWh)\n  const [inverterCapacity, setInverterCapacity] = useState(3.0);\n  const [batteryCapacity, setBatteryCapacity] = useState(10);\n  const [timeOfDay, setTimeOfDay] = useState(12); // default noon (12:00)\n  const [appliances, setAppliances] = useState({\n    TV: false,\n    Oven: false,\n    Aircon: false\n  });\n\n  // Handlers for input changes\n  const handleInverterCapacityChange = e => {\n    const value = parseFloat(e.target.value);\n    if (!isNaN(value)) {\n      setInverterCapacity(value);\n    }\n  };\n  const handleBatteryCapacityChange = capacity => {\n    setBatteryCapacity(capacity);\n  };\n  const handleApplianceToggle = name => {\n    setAppliances(prev => ({\n      ...prev,\n      [name]: !prev[name]\n    }));\n  };\n  const handleTimeChange = e => {\n    setTimeOfDay(parseFloat(e.target.value));\n  };\n\n  // Run the simulation from midnight to the selected time-of-day\n  const simulation = simulateDay(timeOfDay, inverterCapacity, batteryCapacity, appliances);\n  const formatTime = t => {\n    const hours = Math.floor(t);\n    const minutes = Math.floor((t - hours) * 60);\n    return `${hours.toString().padStart(2, '0')}:${minutes.toString().padStart(2, '0')}`;\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      padding: '20px',\n      fontFamily: 'Arial, sans-serif'\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Solar + Battery House Simulation\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 131,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(\"label\", {\n        children: [\"Inverter Capacity (kW):\", ' ', /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"number\",\n          value: inverterCapacity,\n          onChange: handleInverterCapacityChange,\n          step: \"0.1\",\n          min: \"0\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 137,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 135,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 134,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Battery Capacity (kWh):\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 149,\n        columnNumber: 9\n      }, this), [5, 10, 15, 20, 25].map(cap => /*#__PURE__*/_jsxDEV(\"label\", {\n        style: {\n          marginRight: '10px'\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"radio\",\n          name: \"batteryCapacity\",\n          value: cap,\n          checked: batteryCapacity === cap,\n          onChange: () => handleBatteryCapacityChange(cap)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 152,\n          columnNumber: 13\n        }, this), cap, \" kWh\"]\n      }, cap, true, {\n        fileName: _jsxFileName,\n        lineNumber: 151,\n        columnNumber: 11\n      }, this))]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 148,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        margin: '20px 0'\n      },\n      children: /*#__PURE__*/_jsxDEV(\"label\", {\n        children: [\"Time of Day: \", formatTime(timeOfDay), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 168,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"range\",\n          min: \"0\",\n          max: \"24\",\n          step: \"0.1\",\n          value: timeOfDay,\n          onChange: handleTimeChange\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 169,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 166,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 165,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Appliance Control\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 181,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Fridge is always on (0.1 kW)\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 182,\n      columnNumber: 7\n    }, this), Object.keys(appliances).map(name => /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(\"label\", {\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"checkbox\",\n          checked: appliances[name],\n          onChange: () => handleApplianceToggle(name)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 186,\n          columnNumber: 13\n        }, this), name, \" (\", APPLIANCE_LOADS[name], \" kW)\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 185,\n        columnNumber: 11\n      }, this)\n    }, name, false, {\n      fileName: _jsxFileName,\n      lineNumber: 184,\n      columnNumber: 9\n    }, this)), /*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Simulation Results\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 197,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Time: \", formatTime(timeOfDay)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 198,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Solar Production (instantaneous): \", simulation.currentSolar.toFixed(2), \" kW\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 199,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"House Load (instantaneous): \", simulation.currentLoad.toFixed(2), \" kW\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 200,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Battery SoC: \", simulation.batterySoC.toFixed(1), \"%\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 201,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Battery Energy: \", simulation.batteryEnergy.toFixed(2), \" kWh\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 202,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Cumulative Grid Import: \", simulation.cumulativeGridImport.toFixed(2), \" kWh\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 203,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Cumulative Grid Export: \", simulation.cumulativeGridExport.toFixed(2), \" kWh\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 204,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"System Diagram\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 207,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"svg\", {\n      width: \"500\",\n      height: \"300\",\n      style: {\n        border: '1px solid #ccc'\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"g\", {\n        id: \"house\",\n        children: [/*#__PURE__*/_jsxDEV(\"rect\", {\n          x: \"200\",\n          y: \"150\",\n          width: \"200\",\n          height: \"100\",\n          fill: \"none\",\n          stroke: \"black\",\n          strokeWidth: \"2\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 212,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"polygon\", {\n          points: \"200,150 300,100 400,150\",\n          fill: \"none\",\n          stroke: \"black\",\n          strokeWidth: \"2\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 214,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 210,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"g\", {\n        id: \"panels\",\n        children: [/*#__PURE__*/_jsxDEV(\"rect\", {\n          x: \"220\",\n          y: \"110\",\n          width: \"40\",\n          height: \"20\",\n          fill: \"none\",\n          stroke: \"black\",\n          strokeWidth: \"2\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 219,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"rect\", {\n          x: \"280\",\n          y: \"110\",\n          width: \"40\",\n          height: \"20\",\n          fill: \"none\",\n          stroke: \"black\",\n          strokeWidth: \"2\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 220,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"line\", {\n          x1: \"240\",\n          y1: \"130\",\n          x2: \"260\",\n          y2: \"170\",\n          stroke: \"black\",\n          strokeWidth: \"2\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 222,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"line\", {\n          x1: \"300\",\n          y1: \"130\",\n          x2: \"280\",\n          y2: \"170\",\n          stroke: \"black\",\n          strokeWidth: \"2\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 223,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 217,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"g\", {\n        id: \"battery\",\n        children: [/*#__PURE__*/_jsxDEV(\"rect\", {\n          x: \"150\",\n          y: \"170\",\n          width: \"40\",\n          height: \"60\",\n          fill: \"none\",\n          stroke: \"black\",\n          strokeWidth: \"2\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 227,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"text\", {\n          x: \"170\",\n          y: \"165\",\n          fontSize: \"10\",\n          textAnchor: \"middle\",\n          children: \"Battery\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 228,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 226,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"g\", {\n        id: \"inverter\",\n        children: [/*#__PURE__*/_jsxDEV(\"rect\", {\n          x: \"110\",\n          y: \"190\",\n          width: \"12\",\n          height: \"18\",\n          fill: \"none\",\n          stroke: \"black\",\n          strokeWidth: \"2\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 232,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"text\", {\n          x: \"116\",\n          y: \"185\",\n          fontSize: \"8\",\n          textAnchor: \"middle\",\n          children: \"Inv\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 233,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 231,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"line\", {\n        x1: \"150\",\n        y1: \"200\",\n        x2: \"122\",\n        y2: \"200\",\n        stroke: \"black\",\n        strokeWidth: \"2\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 237,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"line\", {\n        x1: \"110\",\n        y1: \"200\",\n        x2: \"200\",\n        y2: \"200\",\n        stroke: \"black\",\n        strokeWidth: \"2\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 239,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"line\", {\n        x1: \"260\",\n        y1: \"170\",\n        x2: \"110\",\n        y2: \"200\",\n        stroke: \"black\",\n        strokeWidth: \"2\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 241,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 208,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 130,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"G9A/yFuiZ+OGOuMzEIlzR0XT4KY=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","SUNRISE","SUNSET","PEAK_TIME","SIGMA","BASE_LOAD","FRIDGE_LOAD","APPLIANCE_LOADS","TV","Oven","Aircon","solarProduction","t","inverterCapacity","production","Math","exp","pow","simulateDay","timeOfDay","batteryCapacity","appliancesState","dt","batteryEnergy","cumulativeGridImport","cumulativeGridExport","load","solar","netPower","energyExcess","availableCapacity","energyToBattery","min","energyExported","deficitEnergy","maxDischargeEnergy","energyFromBattery","energyShortfall","batterySoC","currentLoad","currentSolar","App","_s","setInverterCapacity","setBatteryCapacity","setTimeOfDay","appliances","setAppliances","handleInverterCapacityChange","e","value","parseFloat","target","isNaN","handleBatteryCapacityChange","capacity","handleApplianceToggle","name","prev","handleTimeChange","simulation","formatTime","hours","floor","minutes","toString","padStart","style","padding","fontFamily","children","fileName","_jsxFileName","lineNumber","columnNumber","type","onChange","step","map","cap","marginRight","checked","margin","max","Object","keys","toFixed","width","height","border","id","x","y","fill","stroke","strokeWidth","points","x1","y1","x2","y2","fontSize","textAnchor","_c","$RefreshReg$"],"sources":["/Users/rodrigocandi/solar-simulator/src/App.js"],"sourcesContent":["import React, { useState } from 'react';\nimport './App.css';\n\n// Define constants\nconst SUNRISE = 6.0;       // 6:00 AM\nconst SUNSET = 18.0;       // 6:00 PM\nconst PEAK_TIME = 12.5;    // 12:30 PM\nconst SIGMA = 2.5;         // Controls width of bell curve (in hours)\n\nconst BASE_LOAD = 1.0;     // kW base house load\nconst FRIDGE_LOAD = 0.1;   // kW, always on\nconst APPLIANCE_LOADS = {\n  TV: 0.1,\n  Oven: 2.0,\n  Aircon: 1.5,\n};\n\n// Solar production function (in kW) using a bell curve\nfunction solarProduction(t, inverterCapacity) {\n  // Solar production only between sunrise and sunset\n  if (t < SUNRISE || t > SUNSET) {\n    return 0;\n  }\n  const production = inverterCapacity * Math.exp(-Math.pow(t - PEAK_TIME, 2) / (2 * Math.pow(SIGMA, 2)));\n  return production;\n}\n\n// Simulate the day from t=0 to t=timeOfDay using simple integration\n// Battery starts full. We integrate energy (in kWh) in steps of dt.\nfunction simulateDay(timeOfDay, inverterCapacity, batteryCapacity, appliancesState) {\n  const dt = 0.1; // time step in hours (~6 minutes)\n  let batteryEnergy = batteryCapacity; // kWh (starts full, i.e. 100% SoC)\n  let cumulativeGridImport = 0; // kWh (if battery cannot cover deficit)\n  let cumulativeGridExport = 0; // kWh (excess production when battery is full)\n\n  // Step through time from 0 to current time\n  for (let t = 0; t < timeOfDay; t += dt) {\n    // Calculate load at time t:\n    // Base load + always-on fridge + toggled appliances\n    let load = BASE_LOAD + FRIDGE_LOAD;\n    if (appliancesState.TV) load += APPLIANCE_LOADS.TV;\n    if (appliancesState.Oven) load += APPLIANCE_LOADS.Oven;\n    if (appliancesState.Aircon) load += APPLIANCE_LOADS.Aircon;\n    \n    // Get solar production at time t\n    const solar = solarProduction(t, inverterCapacity);\n    const netPower = solar - load; // kW (positive means excess solar)\n    \n    if (netPower >= 0) {\n      // Excess solar: battery charges, and any extra is exported to the grid\n      const energyExcess = netPower * dt; // kWh available for charging\n      const availableCapacity = batteryCapacity - batteryEnergy;\n      const energyToBattery = Math.min(energyExcess, availableCapacity);\n      batteryEnergy += energyToBattery;\n      const energyExported = energyExcess - energyToBattery;\n      cumulativeGridExport += energyExported;\n    } else {\n      // Deficit: battery discharges to cover load\n      const deficitEnergy = (-netPower) * dt; // kWh required\n      const maxDischargeEnergy = 5 * dt; // kWh maximum that can be discharged in this dt (5 kW cap)\n      const energyFromBattery = Math.min(deficitEnergy, batteryEnergy, maxDischargeEnergy);\n      batteryEnergy -= energyFromBattery;\n      const energyShortfall = deficitEnergy - energyFromBattery;\n      cumulativeGridImport += energyShortfall;\n    }\n  }\n  \n  // Calculate battery State of Charge (SoC) as a percentage\n  const batterySoC = (batteryEnergy / batteryCapacity) * 100;\n  \n  // Calculate instantaneous values at the selected time-of-day:\n  let currentLoad = BASE_LOAD + FRIDGE_LOAD;\n  if (appliancesState.TV) currentLoad += APPLIANCE_LOADS.TV;\n  if (appliancesState.Oven) currentLoad += APPLIANCE_LOADS.Oven;\n  if (appliancesState.Aircon) currentLoad += APPLIANCE_LOADS.Aircon;\n  \n  const currentSolar = solarProduction(timeOfDay, inverterCapacity);\n  \n  return {\n    batterySoC,\n    batteryEnergy,\n    cumulativeGridImport,\n    cumulativeGridExport,\n    currentLoad,\n    currentSolar\n  };\n}\n\nfunction App() {\n  // State variables for inverter capacity (kW) and battery capacity (kWh)\n  const [inverterCapacity, setInverterCapacity] = useState(3.0);\n  const [batteryCapacity, setBatteryCapacity] = useState(10);\n  const [timeOfDay, setTimeOfDay] = useState(12); // default noon (12:00)\n  const [appliances, setAppliances] = useState({\n    TV: false,\n    Oven: false,\n    Aircon: false,\n  });\n  \n  // Handlers for input changes\n  const handleInverterCapacityChange = (e) => {\n    const value = parseFloat(e.target.value);\n    if (!isNaN(value)) {\n      setInverterCapacity(value);\n    }\n  };\n  \n  const handleBatteryCapacityChange = (capacity) => {\n    setBatteryCapacity(capacity);\n  };\n  \n  const handleApplianceToggle = (name) => {\n    setAppliances(prev => ({ ...prev, [name]: !prev[name] }));\n  };\n  \n  const handleTimeChange = (e) => {\n    setTimeOfDay(parseFloat(e.target.value));\n  };\n  \n  // Run the simulation from midnight to the selected time-of-day\n  const simulation = simulateDay(timeOfDay, inverterCapacity, batteryCapacity, appliances);\n  \n  const formatTime = (t) => {\n    const hours = Math.floor(t);\n    const minutes = Math.floor((t - hours) * 60);\n    return `${hours.toString().padStart(2, '0')}:${minutes.toString().padStart(2, '0')}`;\n  };\n  \n  return (\n    <div style={{ padding: '20px', fontFamily: 'Arial, sans-serif' }}>\n      <h1>Solar + Battery House Simulation</h1>\n      \n      {/* Inverter Capacity Input */}\n      <div>\n        <label>\n          Inverter Capacity (kW):{' '}\n          <input \n            type=\"number\" \n            value={inverterCapacity} \n            onChange={handleInverterCapacityChange} \n            step=\"0.1\" \n            min=\"0\" \n          />\n        </label>\n      </div>\n      \n      {/* Battery Capacity Selection */}\n      <div>\n        <p>Battery Capacity (kWh):</p>\n        {[5, 10, 15, 20, 25].map((cap) => (\n          <label key={cap} style={{ marginRight: '10px' }}>\n            <input \n              type=\"radio\" \n              name=\"batteryCapacity\" \n              value={cap} \n              checked={batteryCapacity === cap} \n              onChange={() => handleBatteryCapacityChange(cap)} \n            />\n            {cap} kWh\n          </label>\n        ))}\n      </div>\n      \n      {/* Time-of-Day Slider */}\n      <div style={{ margin: '20px 0' }}>\n        <label>\n          Time of Day: {formatTime(timeOfDay)}\n          <br />\n          <input \n            type=\"range\" \n            min=\"0\" \n            max=\"24\" \n            step=\"0.1\" \n            value={timeOfDay} \n            onChange={handleTimeChange}\n          />\n        </label>\n      </div>\n      \n      {/* Appliance Controls */}\n      <h2>Appliance Control</h2>\n      <p>Fridge is always on (0.1 kW)</p>\n      {Object.keys(appliances).map((name) => (\n        <div key={name}>\n          <label>\n            <input \n              type=\"checkbox\" \n              checked={appliances[name]} \n              onChange={() => handleApplianceToggle(name)}\n            />\n            {name} ({APPLIANCE_LOADS[name]} kW)\n          </label>\n        </div>\n      ))}\n      \n      {/* Simulation Results */}\n      <h2>Simulation Results</h2>\n      <p>Time: {formatTime(timeOfDay)}</p>\n      <p>Solar Production (instantaneous): {simulation.currentSolar.toFixed(2)} kW</p>\n      <p>House Load (instantaneous): {simulation.currentLoad.toFixed(2)} kW</p>\n      <p>Battery SoC: {simulation.batterySoC.toFixed(1)}%</p>\n      <p>Battery Energy: {simulation.batteryEnergy.toFixed(2)} kWh</p>\n      <p>Cumulative Grid Import: {simulation.cumulativeGridImport.toFixed(2)} kWh</p>\n      <p>Cumulative Grid Export: {simulation.cumulativeGridExport.toFixed(2)} kWh</p>\n      \n      {/* SVG System Diagram */}\n      <h2>System Diagram</h2>\n      <svg width=\"500\" height=\"300\" style={{ border: '1px solid #ccc' }}>\n        {/* 3D House Outline */}\n        <g id=\"house\">\n          {/* House body */}\n          <rect x=\"200\" y=\"150\" width=\"200\" height=\"100\" fill=\"none\" stroke=\"black\" strokeWidth=\"2\" />\n          {/* Roof (triangle) */}\n          <polygon points=\"200,150 300,100 400,150\" fill=\"none\" stroke=\"black\" strokeWidth=\"2\" />\n        </g>\n        {/* Solar Panels on the Roof */}\n        <g id=\"panels\">\n          {/* Two panels */}\n          <rect x=\"220\" y=\"110\" width=\"40\" height=\"20\" fill=\"none\" stroke=\"black\" strokeWidth=\"2\" />\n          <rect x=\"280\" y=\"110\" width=\"40\" height=\"20\" fill=\"none\" stroke=\"black\" strokeWidth=\"2\" />\n          {/* Connecting lines from panels to inverter (see below) */}\n          <line x1=\"240\" y1=\"130\" x2=\"260\" y2=\"170\" stroke=\"black\" strokeWidth=\"2\" />\n          <line x1=\"300\" y1=\"130\" x2=\"280\" y2=\"170\" stroke=\"black\" strokeWidth=\"2\" />\n        </g>\n        {/* Battery attached to the house wall */}\n        <g id=\"battery\">\n          <rect x=\"150\" y=\"170\" width=\"40\" height=\"60\" fill=\"none\" stroke=\"black\" strokeWidth=\"2\" />\n          <text x=\"170\" y=\"165\" fontSize=\"10\" textAnchor=\"middle\">Battery</text>\n        </g>\n        {/* Inverter (30% size of battery) */}\n        <g id=\"inverter\">\n          <rect x=\"110\" y=\"190\" width=\"12\" height=\"18\" fill=\"none\" stroke=\"black\" strokeWidth=\"2\" />\n          <text x=\"116\" y=\"185\" fontSize=\"8\" textAnchor=\"middle\">Inv</text>\n        </g>\n        {/* Connecting lines */}\n        {/* Battery to Inverter */}\n        <line x1=\"150\" y1=\"200\" x2=\"122\" y2=\"200\" stroke=\"black\" strokeWidth=\"2\" />\n        {/* Inverter to House */}\n        <line x1=\"110\" y1=\"200\" x2=\"200\" y2=\"200\" stroke=\"black\" strokeWidth=\"2\" />\n        {/* Panels to Inverter */}\n        <line x1=\"260\" y1=\"170\" x2=\"110\" y2=\"200\" stroke=\"black\" strokeWidth=\"2\" />\n      </svg>\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}