{"ast":null,"code":"var _jsxFileName = \"/Users/rodrigocandi/solar-simulator/src/App.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport './App.css'; // Make sure to add the CSS below in App.css\n\n// System parameters\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst BASE_LOAD = 1.0; // kW – base house load\nconst BATTERY_MAX_SUPPLY = 2.0; // kW – max battery discharge for simulation\n\n// Appliance loads in kW\nconst APPLIANCE_LOADS = {\n  Fridge: 0.1,\n  TV: 0.1,\n  Oven: 2.0,\n  Aircon: 1.5\n};\n\n// Solar production as a function of time (in hours).\n// Uses a bell-curve (Gaussian) with a peak at 12.5 (12:30 PM)\nfunction solarProduction(time) {\n  const peakProduction = 3.0; // kW maximum solar production\n  const peakTime = 12.5; // Peak at 12:30 PM\n  const sigma = 2; // controls the width of the bell curve\n  return peakProduction * Math.exp(-Math.pow(time - peakTime, 2) / (2 * Math.pow(sigma, 2)));\n}\n\n// Battery SoC (in percent) as a simple function of time-of-day:\n// - Before 6 AM: low (20%)\n// - From 6 AM to 12:30 PM: charges linearly from 20% to 100%\n// - 12:30 PM to 6 PM: remains fully charged (100%)\n// - From 6 PM to Midnight: discharges linearly from 100% to 20%\nfunction getBatterySoC(time) {\n  if (time < 6) {\n    return 20;\n  } else if (time >= 6 && time <= 12.5) {\n    return 20 + (time - 6) * (80 / (12.5 - 6));\n  } else if (time > 12.5 && time < 18) {\n    return 100;\n  } else if (time >= 18 && time <= 24) {\n    return 100 - (time - 18) * (80 / (24 - 18));\n  } else {\n    return 20;\n  }\n}\nfunction App() {\n  _s();\n  const [batteryOn, setBatteryOn] = useState(true);\n  const [appliances, setAppliances] = useState({\n    Fridge: false,\n    TV: false,\n    Oven: false,\n    Aircon: false\n  });\n  const [timeOfDay, setTimeOfDay] = useState(12.5); // default to noon\n\n  // Toggle battery on/off\n  const handleBatteryChange = () => {\n    setBatteryOn(prev => !prev);\n  };\n\n  // Toggle each appliance on/off\n  const handleApplianceChange = applianceName => {\n    setAppliances(prevState => ({\n      ...prevState,\n      [applianceName]: !prevState[applianceName]\n    }));\n  };\n\n  // Update time-of-day when slider changes\n  const handleTimeChange = e => {\n    setTimeOfDay(parseFloat(e.target.value));\n  };\n\n  // Calculate total load from base load plus any selected appliances\n  const totalApplianceLoad = Object.keys(APPLIANCE_LOADS).reduce((sum, appliance) => {\n    return appliances[appliance] ? sum + APPLIANCE_LOADS[appliance] : sum;\n  }, 0);\n  const totalLoad = BASE_LOAD + totalApplianceLoad;\n\n  // Compute current solar production based on time-of-day slider\n  const currentSolarProduction = solarProduction(timeOfDay);\n\n  // Compute grid consumption based on whether the battery is used.\n  // (If battery is on, it covers up to its maximum supply.)\n  let gridConsumption = 0;\n  if (batteryOn) {\n    const deficit = totalLoad - currentSolarProduction;\n    if (deficit > 0) {\n      const batteryCover = Math.min(deficit, BATTERY_MAX_SUPPLY);\n      gridConsumption = deficit - batteryCover;\n    }\n  } else {\n    gridConsumption = Math.max(0, totalLoad - currentSolarProduction);\n  }\n\n  // Compute battery SoC from time-of-day (our simplified function)\n  const batterySoC = getBatterySoC(timeOfDay);\n\n  // Format time-of-day (e.g., \"12:30\") from the slider value\n  const formatTime = time => {\n    const hours = Math.floor(time);\n    const minutes = Math.floor((time - hours) * 60);\n    return `${hours.toString().padStart(2, '0')}:${minutes.toString().padStart(2, '0')}`;\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      padding: '20px',\n      fontFamily: 'Arial, sans-serif'\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Solar + Battery House Simulation\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(\"label\", {\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"checkbox\",\n          checked: batteryOn,\n          onChange: handleBatteryChange\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 109,\n          columnNumber: 11\n        }, this), \"With Battery\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        margin: '20px 0'\n      },\n      children: /*#__PURE__*/_jsxDEV(\"label\", {\n        children: [\"Time of Day: \", formatTime(timeOfDay), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 118,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"range\",\n          min: \"0\",\n          max: \"24\",\n          step: \"0.1\",\n          value: timeOfDay,\n          onChange: handleTimeChange\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 119,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 116,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Appliance Control\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 131,\n      columnNumber: 7\n    }, this), Object.keys(APPLIANCE_LOADS).map(applianceName => /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(\"label\", {\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"checkbox\",\n          checked: appliances[applianceName],\n          onChange: () => handleApplianceChange(applianceName)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 135,\n          columnNumber: 13\n        }, this), applianceName, \" (\", APPLIANCE_LOADS[applianceName], \" kW)\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 134,\n        columnNumber: 11\n      }, this)\n    }, applianceName, false, {\n      fileName: _jsxFileName,\n      lineNumber: 133,\n      columnNumber: 9\n    }, this)), /*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Simulation Results\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 146,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Total Load: \", totalLoad.toFixed(2), \" kW\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 147,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Solar Production: \", currentSolarProduction.toFixed(2), \" kW\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 148,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Battery SoC: \", batterySoC.toFixed(0), \"%\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 149,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Grid Consumption: \", gridConsumption.toFixed(2), \" kW\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 150,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"System Diagram\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 153,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"svg\", {\n      width: \"300\",\n      height: \"100\",\n      children: [/*#__PURE__*/_jsxDEV(\"rect\", {\n        x: \"10\",\n        y: \"30\",\n        width: \"50\",\n        height: \"40\",\n        fill: \"#ccc\",\n        stroke: \"#000\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 156,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"text\", {\n        x: \"35\",\n        y: \"25\",\n        textAnchor: \"middle\",\n        fontSize: \"12\",\n        children: \"Battery\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 157,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"rect\", {\n        x: \"240\",\n        y: \"30\",\n        width: \"50\",\n        height: \"40\",\n        fill: \"#ccc\",\n        stroke: \"#000\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 159,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"text\", {\n        x: \"265\",\n        y: \"25\",\n        textAnchor: \"middle\",\n        fontSize: \"12\",\n        children: \"House\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 160,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"line\", {\n        x1: \"60\",\n        y1: \"50\",\n        x2: \"240\",\n        y2: \"50\",\n        stroke: \"#000\",\n        strokeWidth: \"2\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 162,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"circle\", {\n        cx: \"60\",\n        cy: \"50\",\n        r: \"5\",\n        fill: \"yellow\",\n        className: timeOfDay >= 18 ? \"electricity\" : \"\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 165,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 154,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 105,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"VmlnNskYecS+GF5yZVNKwelg9R8=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","BASE_LOAD","BATTERY_MAX_SUPPLY","APPLIANCE_LOADS","Fridge","TV","Oven","Aircon","solarProduction","time","peakProduction","peakTime","sigma","Math","exp","pow","getBatterySoC","App","_s","batteryOn","setBatteryOn","appliances","setAppliances","timeOfDay","setTimeOfDay","handleBatteryChange","prev","handleApplianceChange","applianceName","prevState","handleTimeChange","e","parseFloat","target","value","totalApplianceLoad","Object","keys","reduce","sum","appliance","totalLoad","currentSolarProduction","gridConsumption","deficit","batteryCover","min","max","batterySoC","formatTime","hours","floor","minutes","toString","padStart","style","padding","fontFamily","children","fileName","_jsxFileName","lineNumber","columnNumber","type","checked","onChange","margin","step","map","toFixed","width","height","x","y","fill","stroke","textAnchor","fontSize","x1","y1","x2","y2","strokeWidth","cx","cy","r","className","_c","$RefreshReg$"],"sources":["/Users/rodrigocandi/solar-simulator/src/App.js"],"sourcesContent":["import React, { useState } from 'react';\nimport './App.css'; // Make sure to add the CSS below in App.css\n\n// System parameters\nconst BASE_LOAD = 1.0; // kW – base house load\nconst BATTERY_MAX_SUPPLY = 2.0; // kW – max battery discharge for simulation\n\n// Appliance loads in kW\nconst APPLIANCE_LOADS = {\n  Fridge: 0.1,\n  TV: 0.1,\n  Oven: 2.0,\n  Aircon: 1.5,\n};\n\n// Solar production as a function of time (in hours).\n// Uses a bell-curve (Gaussian) with a peak at 12.5 (12:30 PM)\nfunction solarProduction(time) {\n  const peakProduction = 3.0; // kW maximum solar production\n  const peakTime = 12.5; // Peak at 12:30 PM\n  const sigma = 2; // controls the width of the bell curve\n  return peakProduction * Math.exp(-Math.pow(time - peakTime, 2) / (2 * Math.pow(sigma, 2)));\n}\n\n// Battery SoC (in percent) as a simple function of time-of-day:\n// - Before 6 AM: low (20%)\n// - From 6 AM to 12:30 PM: charges linearly from 20% to 100%\n// - 12:30 PM to 6 PM: remains fully charged (100%)\n// - From 6 PM to Midnight: discharges linearly from 100% to 20%\nfunction getBatterySoC(time) {\n  if (time < 6) {\n    return 20;\n  } else if (time >= 6 && time <= 12.5) {\n    return 20 + (time - 6) * (80 / (12.5 - 6));\n  } else if (time > 12.5 && time < 18) {\n    return 100;\n  } else if (time >= 18 && time <= 24) {\n    return 100 - (time - 18) * (80 / (24 - 18));\n  } else {\n    return 20;\n  }\n}\n\nfunction App() {\n  const [batteryOn, setBatteryOn] = useState(true);\n  const [appliances, setAppliances] = useState({\n    Fridge: false,\n    TV: false,\n    Oven: false,\n    Aircon: false,\n  });\n  const [timeOfDay, setTimeOfDay] = useState(12.5); // default to noon\n\n  // Toggle battery on/off\n  const handleBatteryChange = () => {\n    setBatteryOn(prev => !prev);\n  };\n\n  // Toggle each appliance on/off\n  const handleApplianceChange = (applianceName) => {\n    setAppliances(prevState => ({\n      ...prevState,\n      [applianceName]: !prevState[applianceName],\n    }));\n  };\n\n  // Update time-of-day when slider changes\n  const handleTimeChange = (e) => {\n    setTimeOfDay(parseFloat(e.target.value));\n  };\n\n  // Calculate total load from base load plus any selected appliances\n  const totalApplianceLoad = Object.keys(APPLIANCE_LOADS).reduce((sum, appliance) => {\n    return appliances[appliance] ? sum + APPLIANCE_LOADS[appliance] : sum;\n  }, 0);\n  const totalLoad = BASE_LOAD + totalApplianceLoad;\n\n  // Compute current solar production based on time-of-day slider\n  const currentSolarProduction = solarProduction(timeOfDay);\n\n  // Compute grid consumption based on whether the battery is used.\n  // (If battery is on, it covers up to its maximum supply.)\n  let gridConsumption = 0;\n  if (batteryOn) {\n    const deficit = totalLoad - currentSolarProduction;\n    if (deficit > 0) {\n      const batteryCover = Math.min(deficit, BATTERY_MAX_SUPPLY);\n      gridConsumption = deficit - batteryCover;\n    }\n  } else {\n    gridConsumption = Math.max(0, totalLoad - currentSolarProduction);\n  }\n\n  // Compute battery SoC from time-of-day (our simplified function)\n  const batterySoC = getBatterySoC(timeOfDay);\n\n  // Format time-of-day (e.g., \"12:30\") from the slider value\n  const formatTime = (time) => {\n    const hours = Math.floor(time);\n    const minutes = Math.floor((time - hours) * 60);\n    return `${hours.toString().padStart(2, '0')}:${minutes.toString().padStart(2, '0')}`;\n  };\n\n  return (\n    <div style={{ padding: '20px', fontFamily: 'Arial, sans-serif' }}>\n      <h1>Solar + Battery House Simulation</h1>\n      <div>\n        <label>\n          <input type=\"checkbox\" checked={batteryOn} onChange={handleBatteryChange} />\n          With Battery\n        </label>\n      </div>\n\n      {/* Time-of-day slider */}\n      <div style={{ margin: '20px 0' }}>\n        <label>\n          Time of Day: {formatTime(timeOfDay)}\n          <br />\n          <input\n            type=\"range\"\n            min=\"0\"\n            max=\"24\"\n            step=\"0.1\"\n            value={timeOfDay}\n            onChange={handleTimeChange}\n          />\n        </label>\n      </div>\n\n      {/* Appliance toggles */}\n      <h2>Appliance Control</h2>\n      {Object.keys(APPLIANCE_LOADS).map(applianceName => (\n        <div key={applianceName}>\n          <label>\n            <input\n              type=\"checkbox\"\n              checked={appliances[applianceName]}\n              onChange={() => handleApplianceChange(applianceName)}\n            />\n            {applianceName} ({APPLIANCE_LOADS[applianceName]} kW)\n          </label>\n        </div>\n      ))}\n\n      {/* Display simulation results */}\n      <h2>Simulation Results</h2>\n      <p>Total Load: {totalLoad.toFixed(2)} kW</p>\n      <p>Solar Production: {currentSolarProduction.toFixed(2)} kW</p>\n      <p>Battery SoC: {batterySoC.toFixed(0)}%</p>\n      <p>Grid Consumption: {gridConsumption.toFixed(2)} kW</p>\n\n      {/* Simple SVG system diagram */}\n      <h2>System Diagram</h2>\n      <svg width=\"300\" height=\"100\">\n        {/* Battery */}\n        <rect x=\"10\" y=\"30\" width=\"50\" height=\"40\" fill=\"#ccc\" stroke=\"#000\" />\n        <text x=\"35\" y=\"25\" textAnchor=\"middle\" fontSize=\"12\">Battery</text>\n        {/* House */}\n        <rect x=\"240\" y=\"30\" width=\"50\" height=\"40\" fill=\"#ccc\" stroke=\"#000\" />\n        <text x=\"265\" y=\"25\" textAnchor=\"middle\" fontSize=\"12\">House</text>\n        {/* Wire */}\n        <line x1=\"60\" y1=\"50\" x2=\"240\" y2=\"50\" stroke=\"#000\" strokeWidth=\"2\" />\n        {/* Electricity flow:\n            The yellow circle animates along the wire when it’s after sunset (time >= 18) */}\n        <circle\n          cx=\"60\"\n          cy=\"50\"\n          r=\"5\"\n          fill=\"yellow\"\n          className={timeOfDay >= 18 ? \"electricity\" : \"\"}\n        />\n      </svg>\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}