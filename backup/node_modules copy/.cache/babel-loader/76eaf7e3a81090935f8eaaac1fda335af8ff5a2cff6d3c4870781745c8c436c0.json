{"ast":null,"code":"var _jsxFileName = \"/Users/rodrigocandi/solar-simulator/src/App.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport './App.css';\nimport { Line } from 'react-chartjs-2';\nimport { Chart as ChartJS, CategoryScale, LinearScale, PointElement, LineElement, Title, Tooltip, Legend } from 'chart.js';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nChartJS.register(CategoryScale, LinearScale, PointElement, LineElement, Title, Tooltip, Legend);\n\n// Constants\nconst SUNRISE = 6.0; // 6:00 AM\nconst SUNSET = 18.0; // 6:00 PM\nconst PEAK_TIME = 12.5; // 12:30 PM\nconst SIGMA = 2.5; // width of the bell curve\n\nconst BASE_LOAD = 1.0; // kW base house load\nconst FRIDGE_LOAD = 0.1; // kW, always on\nconst APPLIANCE_LOADS = {\n  TV: 0.1,\n  Oven: 2.0,\n  Aircon: 1.5\n};\n\n// Solar production function (in kW) using a bell curve that only produces power between sunrise and sunset.\nfunction solarProduction(t, inverterCapacity) {\n  if (t < SUNRISE || t > SUNSET) return 0;\n  const production = inverterCapacity * Math.exp(-Math.pow(t - PEAK_TIME, 2) / (2 * Math.pow(SIGMA, 2)));\n  return production;\n}\n\n// Simulation function which integrates the day from midnight to the current time.\n// It returns the final simulation results and also arrays for plotting.\nfunction simulateDay(timeOfDay, inverterCapacity, batteryCapacity, appliancesState) {\n  const dt = 0.1; // time step in hours (~6 minutes)\n  let batteryEnergy = batteryCapacity; // Battery energy in kWh (starts full)\n  let cumulativeGridImport = 0; // kWh imported from grid\n  let cumulativeGridExport = 0; // kWh exported to grid\n  let cumulativeHouseConsumption = 0; // kWh consumed by the house\n\n  // Arrays for graphing\n  const times = [];\n  const socArr = [];\n  const gridImportArr = [];\n  const consumptionArr = [];\n  const solarArr = []; // NEW: Array to record solar production\n\n  // Integrate over time from 0 to timeOfDay\n  for (let t = 0; t <= timeOfDay; t += dt) {\n    // Calculate house load (base load + fridge + any toggled appliances)\n    let load = BASE_LOAD + FRIDGE_LOAD;\n    if (appliancesState.TV) load += APPLIANCE_LOADS.TV;\n    if (appliancesState.Oven) load += APPLIANCE_LOADS.Oven;\n    if (appliancesState.Aircon) load += APPLIANCE_LOADS.Aircon;\n\n    // Integrate house consumption\n    cumulativeHouseConsumption += load * dt; // kWh\n\n    // Solar production at time t\n    const solar = solarProduction(t, inverterCapacity);\n    solarArr.push(solar); // RECORD SOLAR PRODUCTION for graphing\n\n    const netPower = solar - load; // kW (positive means excess solar)\n\n    if (netPower >= 0) {\n      // Excess solar: charge battery (limited by remaining capacity) and export any extra to grid\n      const energyExcess = netPower * dt; // kWh available for charging\n      const availableCapacity = batteryCapacity - batteryEnergy;\n      const energyToBattery = Math.min(energyExcess, availableCapacity);\n      batteryEnergy += energyToBattery;\n      const energyExported = energyExcess - energyToBattery;\n      cumulativeGridExport += energyExported;\n    } else {\n      // Deficit: discharge battery to cover load (limited by a 5 kW rate)\n      const deficitEnergy = -netPower * dt; // kWh needed\n      const maxDischargeEnergy = 5 * dt; // maximum energy that can be discharged in this time step (5 kW cap)\n      const energyFromBattery = Math.min(deficitEnergy, batteryEnergy, maxDischargeEnergy);\n      batteryEnergy -= energyFromBattery;\n      const energyShortfall = deficitEnergy - energyFromBattery;\n      cumulativeGridImport += energyShortfall;\n    }\n\n    // Battery State of Charge (SoC)\n    const batterySoC = batteryEnergy / batteryCapacity * 100;\n\n    // Record values for graphing\n    times.push(t);\n    socArr.push(batterySoC);\n    gridImportArr.push(cumulativeGridImport);\n    consumptionArr.push(cumulativeHouseConsumption);\n  }\n\n  // Final instantaneous values at timeOfDay\n  let finalLoad = BASE_LOAD + FRIDGE_LOAD;\n  if (appliancesState.TV) finalLoad += APPLIANCE_LOADS.TV;\n  if (appliancesState.Oven) finalLoad += APPLIANCE_LOADS.Oven;\n  if (appliancesState.Aircon) finalLoad += APPLIANCE_LOADS.Aircon;\n  const finalSolar = solarProduction(timeOfDay, inverterCapacity);\n  return {\n    batterySoC: batteryEnergy / batteryCapacity * 100,\n    batteryEnergy,\n    cumulativeGridImport,\n    cumulativeGridExport,\n    currentLoad: finalLoad,\n    currentSolar: finalSolar,\n    cumulativeHouseConsumption,\n    times,\n    socArr,\n    gridImportArr,\n    consumptionArr,\n    solarArr // NEW: Return solar production data\n  };\n}\nfunction App() {\n  _s();\n  // Component state\n  const [inverterCapacity, setInverterCapacity] = useState(3.0);\n  const [batteryCapacity, setBatteryCapacity] = useState(10);\n  const [timeOfDay, setTimeOfDay] = useState(12); // default: 12:00 (noon)\n  const [appliances, setAppliances] = useState({\n    TV: false,\n    Oven: false,\n    Aircon: false\n  });\n\n  // Handlers for inputs\n  const handleInverterCapacityChange = e => {\n    const value = parseFloat(e.target.value);\n    if (!isNaN(value)) setInverterCapacity(value);\n  };\n  const handleBatteryCapacityChange = capacity => {\n    setBatteryCapacity(capacity);\n  };\n  const handleApplianceToggle = name => {\n    setAppliances(prev => ({\n      ...prev,\n      [name]: !prev[name]\n    }));\n  };\n  const handleTimeChange = e => {\n    setTimeOfDay(parseFloat(e.target.value));\n  };\n\n  // Run the simulation from midnight to the selected time-of-day\n  const simulation = simulateDay(timeOfDay, inverterCapacity, batteryCapacity, appliances);\n\n  // Format time as HH:MM from a decimal hour value\n  const formatTime = t => {\n    const hours = Math.floor(t);\n    const minutes = Math.floor((t - hours) * 60);\n    return `${hours.toString().padStart(2, '0')}:${minutes.toString().padStart(2, '0')}`;\n  };\n\n  // Prepare chart data if timeOfDay > 0 (if timeOfDay resets to 0, the graph is cleared)\n  let chartData = null;\n  if (timeOfDay > 0) {\n    chartData = {\n      labels: simulation.times.map(t => formatTime(t)),\n      datasets: [{\n        label: 'Battery SoC (%)',\n        data: simulation.socArr,\n        borderColor: 'blue',\n        backgroundColor: 'blue',\n        yAxisID: 'y1',\n        fill: false\n      }, {\n        label: 'Cumulative Grid Import (kWh)',\n        data: simulation.gridImportArr,\n        borderColor: 'red',\n        backgroundColor: 'red',\n        yAxisID: 'y2',\n        fill: false\n      }, {\n        label: 'Solar Production (kW)',\n        // NEW DATASET\n        data: simulation.solarArr,\n        borderColor: 'green',\n        backgroundColor: 'green',\n        yAxisID: 'y3',\n        fill: false\n      }]\n    };\n  }\n\n  // Chart options with three y-axes\n  const chartOptions = {\n    responsive: true,\n    plugins: {\n      legend: {\n        position: 'top'\n      },\n      title: {\n        display: true,\n        text: 'SoC, Cumulative Grid Import & Solar Production Over Time'\n      }\n    },\n    scales: {\n      y1: {\n        type: 'linear',\n        position: 'left',\n        title: {\n          display: true,\n          text: 'Battery SoC (%)'\n        },\n        min: 0,\n        max: 100\n      },\n      y2: {\n        type: 'linear',\n        position: 'right',\n        title: {\n          display: true,\n          text: 'Grid Import (kWh)'\n        },\n        grid: {\n          drawOnChartArea: false\n        }\n      },\n      y3: {\n        // NEW: Axis for Solar Production\n        type: 'linear',\n        position: 'right',\n        title: {\n          display: true,\n          text: 'Solar Production (kW)'\n        },\n        grid: {\n          drawOnChartArea: false\n        },\n        offset: true\n      }\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      padding: '20px',\n      fontFamily: 'Arial, sans-serif'\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Solar + Battery House Simulation\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 236,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(\"label\", {\n        children: [\"Inverter Capacity (kW):\", ' ', /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"number\",\n          value: inverterCapacity,\n          onChange: handleInverterCapacityChange,\n          step: \"0.1\",\n          min: \"0\",\n          style: {\n            padding: '5px',\n            fontSize: '16px',\n            width: '80px'\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 242,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 240,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 239,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Battery Capacity (kWh):\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 255,\n        columnNumber: 9\n      }, this), [5, 10, 15, 20, 25].map(cap => /*#__PURE__*/_jsxDEV(\"label\", {\n        style: {\n          marginRight: '10px'\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"radio\",\n          name: \"batteryCapacity\",\n          value: cap,\n          checked: batteryCapacity === cap,\n          onChange: () => handleBatteryCapacityChange(cap)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 258,\n          columnNumber: 13\n        }, this), cap, \" kWh\"]\n      }, cap, true, {\n        fileName: _jsxFileName,\n        lineNumber: 257,\n        columnNumber: 11\n      }, this))]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 254,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        margin: '20px 0'\n      },\n      children: /*#__PURE__*/_jsxDEV(\"label\", {\n        children: [\"Time of Day: \", formatTime(timeOfDay), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 274,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"range\",\n          min: \"0\",\n          max: \"24\",\n          step: \"0.1\",\n          value: timeOfDay,\n          onChange: handleTimeChange\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 275,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 272,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 271,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Appliance Control\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 287,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Fridge is always on (0.1 kW)\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 288,\n      columnNumber: 7\n    }, this), Object.keys(appliances).map(name => /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(\"label\", {\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"checkbox\",\n          checked: appliances[name],\n          onChange: () => handleApplianceToggle(name)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 292,\n          columnNumber: 13\n        }, this), name, \" (\", APPLIANCE_LOADS[name], \" kW)\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 291,\n        columnNumber: 11\n      }, this)\n    }, name, false, {\n      fileName: _jsxFileName,\n      lineNumber: 290,\n      columnNumber: 9\n    }, this)), /*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Simulation Results\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 303,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Time: \", formatTime(timeOfDay)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 304,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Solar Production (instantaneous): \", simulation.currentSolar.toFixed(2), \" kW\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 305,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"House Load (instantaneous): \", simulation.currentLoad.toFixed(2), \" kW\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 306,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Battery SoC: \", simulation.batterySoC.toFixed(1), \"%\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 307,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Battery Energy: \", simulation.batteryEnergy.toFixed(2), \" kWh\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 308,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Cumulative Grid Import: \", simulation.cumulativeGridImport.toFixed(2), \" kWh\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 309,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Cumulative Grid Export: \", simulation.cumulativeGridExport.toFixed(2), \" kWh\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 310,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Cumulative House Consumption: \", simulation.cumulativeHouseConsumption.toFixed(2), \" kWh\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 311,\n      columnNumber: 7\n    }, this), timeOfDay > 0 && chartData && /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        width: '700px',\n        height: '700px',\n        marginTop: '20px'\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"SoC, Cumulative Grid Import & Solar Production Over Time\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 317,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(Line, {\n        data: chartData,\n        options: chartOptions\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 318,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 316,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 235,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"G9A/yFuiZ+OGOuMzEIlzR0XT4KY=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","Line","Chart","ChartJS","CategoryScale","LinearScale","PointElement","LineElement","Title","Tooltip","Legend","jsxDEV","_jsxDEV","register","SUNRISE","SUNSET","PEAK_TIME","SIGMA","BASE_LOAD","FRIDGE_LOAD","APPLIANCE_LOADS","TV","Oven","Aircon","solarProduction","t","inverterCapacity","production","Math","exp","pow","simulateDay","timeOfDay","batteryCapacity","appliancesState","dt","batteryEnergy","cumulativeGridImport","cumulativeGridExport","cumulativeHouseConsumption","times","socArr","gridImportArr","consumptionArr","solarArr","load","solar","push","netPower","energyExcess","availableCapacity","energyToBattery","min","energyExported","deficitEnergy","maxDischargeEnergy","energyFromBattery","energyShortfall","batterySoC","finalLoad","finalSolar","currentLoad","currentSolar","App","_s","setInverterCapacity","setBatteryCapacity","setTimeOfDay","appliances","setAppliances","handleInverterCapacityChange","e","value","parseFloat","target","isNaN","handleBatteryCapacityChange","capacity","handleApplianceToggle","name","prev","handleTimeChange","simulation","formatTime","hours","floor","minutes","toString","padStart","chartData","labels","map","datasets","label","data","borderColor","backgroundColor","yAxisID","fill","chartOptions","responsive","plugins","legend","position","title","display","text","scales","y1","type","max","y2","grid","drawOnChartArea","y3","offset","style","padding","fontFamily","children","fileName","_jsxFileName","lineNumber","columnNumber","onChange","step","fontSize","width","cap","marginRight","checked","margin","Object","keys","toFixed","height","marginTop","options","_c","$RefreshReg$"],"sources":["/Users/rodrigocandi/solar-simulator/src/App.js"],"sourcesContent":["import React, { useState } from 'react';\nimport './App.css';\nimport { Line } from 'react-chartjs-2';\nimport {\n  Chart as ChartJS,\n  CategoryScale,\n  LinearScale,\n  PointElement,\n  LineElement,\n  Title,\n  Tooltip,\n  Legend,\n} from 'chart.js';\n\nChartJS.register(\n  CategoryScale,\n  LinearScale,\n  PointElement,\n  LineElement,\n  Title,\n  Tooltip,\n  Legend\n);\n\n// Constants\nconst SUNRISE = 6.0; // 6:00 AM\nconst SUNSET = 18.0; // 6:00 PM\nconst PEAK_TIME = 12.5; // 12:30 PM\nconst SIGMA = 2.5; // width of the bell curve\n\nconst BASE_LOAD = 1.0;     // kW base house load\nconst FRIDGE_LOAD = 0.1;   // kW, always on\nconst APPLIANCE_LOADS = {\n  TV: 0.1,\n  Oven: 2.0,\n  Aircon: 1.5,\n};\n\n// Solar production function (in kW) using a bell curve that only produces power between sunrise and sunset.\nfunction solarProduction(t, inverterCapacity) {\n  if (t < SUNRISE || t > SUNSET) return 0;\n  const production = inverterCapacity * Math.exp(-Math.pow(t - PEAK_TIME, 2) / (2 * Math.pow(SIGMA, 2)));\n  return production;\n}\n\n// Simulation function which integrates the day from midnight to the current time.\n// It returns the final simulation results and also arrays for plotting.\nfunction simulateDay(timeOfDay, inverterCapacity, batteryCapacity, appliancesState) {\n  const dt = 0.1; // time step in hours (~6 minutes)\n  let batteryEnergy = batteryCapacity; // Battery energy in kWh (starts full)\n  let cumulativeGridImport = 0; // kWh imported from grid\n  let cumulativeGridExport = 0; // kWh exported to grid\n  let cumulativeHouseConsumption = 0; // kWh consumed by the house\n  \n  // Arrays for graphing\n  const times = [];\n  const socArr = [];\n  const gridImportArr = [];\n  const consumptionArr = [];\n  const solarArr = []; // NEW: Array to record solar production\n  \n  // Integrate over time from 0 to timeOfDay\n  for (let t = 0; t <= timeOfDay; t += dt) {\n    // Calculate house load (base load + fridge + any toggled appliances)\n    let load = BASE_LOAD + FRIDGE_LOAD;\n    if (appliancesState.TV) load += APPLIANCE_LOADS.TV;\n    if (appliancesState.Oven) load += APPLIANCE_LOADS.Oven;\n    if (appliancesState.Aircon) load += APPLIANCE_LOADS.Aircon;\n    \n    // Integrate house consumption\n    cumulativeHouseConsumption += load * dt; // kWh\n\n    // Solar production at time t\n    const solar = solarProduction(t, inverterCapacity);\n    solarArr.push(solar); // RECORD SOLAR PRODUCTION for graphing\n    \n    const netPower = solar - load; // kW (positive means excess solar)\n    \n    if (netPower >= 0) {\n      // Excess solar: charge battery (limited by remaining capacity) and export any extra to grid\n      const energyExcess = netPower * dt; // kWh available for charging\n      const availableCapacity = batteryCapacity - batteryEnergy;\n      const energyToBattery = Math.min(energyExcess, availableCapacity);\n      batteryEnergy += energyToBattery;\n      const energyExported = energyExcess - energyToBattery;\n      cumulativeGridExport += energyExported;\n    } else {\n      // Deficit: discharge battery to cover load (limited by a 5 kW rate)\n      const deficitEnergy = (-netPower) * dt; // kWh needed\n      const maxDischargeEnergy = 5 * dt; // maximum energy that can be discharged in this time step (5 kW cap)\n      const energyFromBattery = Math.min(deficitEnergy, batteryEnergy, maxDischargeEnergy);\n      batteryEnergy -= energyFromBattery;\n      const energyShortfall = deficitEnergy - energyFromBattery;\n      cumulativeGridImport += energyShortfall;\n    }\n    \n    // Battery State of Charge (SoC)\n    const batterySoC = (batteryEnergy / batteryCapacity) * 100;\n    \n    // Record values for graphing\n    times.push(t);\n    socArr.push(batterySoC);\n    gridImportArr.push(cumulativeGridImport);\n    consumptionArr.push(cumulativeHouseConsumption);\n  }\n  \n  // Final instantaneous values at timeOfDay\n  let finalLoad = BASE_LOAD + FRIDGE_LOAD;\n  if (appliancesState.TV) finalLoad += APPLIANCE_LOADS.TV;\n  if (appliancesState.Oven) finalLoad += APPLIANCE_LOADS.Oven;\n  if (appliancesState.Aircon) finalLoad += APPLIANCE_LOADS.Aircon;\n  const finalSolar = solarProduction(timeOfDay, inverterCapacity);\n  \n  return {\n    batterySoC: (batteryEnergy / batteryCapacity) * 100,\n    batteryEnergy,\n    cumulativeGridImport,\n    cumulativeGridExport,\n    currentLoad: finalLoad,\n    currentSolar: finalSolar,\n    cumulativeHouseConsumption,\n    times,\n    socArr,\n    gridImportArr,\n    consumptionArr,\n    solarArr, // NEW: Return solar production data\n  };\n}\n\nfunction App() {\n  // Component state\n  const [inverterCapacity, setInverterCapacity] = useState(3.0);\n  const [batteryCapacity, setBatteryCapacity] = useState(10);\n  const [timeOfDay, setTimeOfDay] = useState(12); // default: 12:00 (noon)\n  const [appliances, setAppliances] = useState({\n    TV: false,\n    Oven: false,\n    Aircon: false,\n  });\n  \n  // Handlers for inputs\n  const handleInverterCapacityChange = (e) => {\n    const value = parseFloat(e.target.value);\n    if (!isNaN(value)) setInverterCapacity(value);\n  };\n  \n  const handleBatteryCapacityChange = (capacity) => {\n    setBatteryCapacity(capacity);\n  };\n  \n  const handleApplianceToggle = (name) => {\n    setAppliances(prev => ({ ...prev, [name]: !prev[name] }));\n  };\n  \n  const handleTimeChange = (e) => {\n    setTimeOfDay(parseFloat(e.target.value));\n  };\n  \n  // Run the simulation from midnight to the selected time-of-day\n  const simulation = simulateDay(timeOfDay, inverterCapacity, batteryCapacity, appliances);\n  \n  // Format time as HH:MM from a decimal hour value\n  const formatTime = (t) => {\n    const hours = Math.floor(t);\n    const minutes = Math.floor((t - hours) * 60);\n    return `${hours.toString().padStart(2, '0')}:${minutes.toString().padStart(2, '0')}`;\n  };\n  \n  // Prepare chart data if timeOfDay > 0 (if timeOfDay resets to 0, the graph is cleared)\n  let chartData = null;\n  if (timeOfDay > 0) {\n    chartData = {\n      labels: simulation.times.map(t => formatTime(t)),\n      datasets: [\n        {\n          label: 'Battery SoC (%)',\n          data: simulation.socArr,\n          borderColor: 'blue',\n          backgroundColor: 'blue',\n          yAxisID: 'y1',\n          fill: false,\n        },\n        {\n          label: 'Cumulative Grid Import (kWh)',\n          data: simulation.gridImportArr,\n          borderColor: 'red',\n          backgroundColor: 'red',\n          yAxisID: 'y2',\n          fill: false,\n        },\n        {\n          label: 'Solar Production (kW)',  // NEW DATASET\n          data: simulation.solarArr,\n          borderColor: 'green',\n          backgroundColor: 'green',\n          yAxisID: 'y3',\n          fill: false,\n        },\n      ]\n    };\n  }\n  \n  // Chart options with three y-axes\n  const chartOptions = {\n    responsive: true,\n    plugins: {\n      legend: { position: 'top' },\n      title: { display: true, text: 'SoC, Cumulative Grid Import & Solar Production Over Time' },\n    },\n    scales: {\n      y1: {\n        type: 'linear',\n        position: 'left',\n        title: { display: true, text: 'Battery SoC (%)' },\n        min: 0,\n        max: 100,\n      },\n      y2: {\n        type: 'linear',\n        position: 'right',\n        title: { display: true, text: 'Grid Import (kWh)' },\n        grid: { drawOnChartArea: false },\n      },\n      y3: {  // NEW: Axis for Solar Production\n        type: 'linear',\n        position: 'right',\n        title: { display: true, text: 'Solar Production (kW)' },\n        grid: { drawOnChartArea: false },\n        offset: true,\n      },\n    },\n  };\n  \n  return (\n    <div style={{ padding: '20px', fontFamily: 'Arial, sans-serif' }}>\n      <h1>Solar + Battery House Simulation</h1>\n      \n      {/* Inverter Capacity Input */}\n      <div>\n        <label>\n          Inverter Capacity (kW):{' '}\n          <input \n            type=\"number\" \n            value={inverterCapacity} \n            onChange={handleInverterCapacityChange} \n            step=\"0.1\" \n            min=\"0\"\n            style={{ padding: '5px', fontSize: '16px', width: '80px' }}\n          />\n        </label>\n      </div>\n      \n      {/* Battery Capacity Selection */}\n      <div>\n        <p>Battery Capacity (kWh):</p>\n        {[5, 10, 15, 20, 25].map(cap => (\n          <label key={cap} style={{ marginRight: '10px' }}>\n            <input \n              type=\"radio\" \n              name=\"batteryCapacity\" \n              value={cap} \n              checked={batteryCapacity === cap} \n              onChange={() => handleBatteryCapacityChange(cap)} \n            />\n            {cap} kWh\n          </label>\n        ))}\n      </div>\n      \n      {/* Time-of-Day Slider */}\n      <div style={{ margin: '20px 0' }}>\n        <label>\n          Time of Day: {formatTime(timeOfDay)}\n          <br />\n          <input \n            type=\"range\" \n            min=\"0\" \n            max=\"24\" \n            step=\"0.1\" \n            value={timeOfDay} \n            onChange={handleTimeChange} \n          />\n        </label>\n      </div>\n      \n      {/* Appliance Controls */}\n      <h2>Appliance Control</h2>\n      <p>Fridge is always on (0.1 kW)</p>\n      {Object.keys(appliances).map(name => (\n        <div key={name}>\n          <label>\n            <input \n              type=\"checkbox\" \n              checked={appliances[name]} \n              onChange={() => handleApplianceToggle(name)} \n            />\n            {name} ({APPLIANCE_LOADS[name]} kW)\n          </label>\n        </div>\n      ))}\n      \n      {/* Simulation Results */}\n      <h2>Simulation Results</h2>\n      <p>Time: {formatTime(timeOfDay)}</p>\n      <p>Solar Production (instantaneous): {simulation.currentSolar.toFixed(2)} kW</p>\n      <p>House Load (instantaneous): {simulation.currentLoad.toFixed(2)} kW</p>\n      <p>Battery SoC: {simulation.batterySoC.toFixed(1)}%</p>\n      <p>Battery Energy: {simulation.batteryEnergy.toFixed(2)} kWh</p>\n      <p>Cumulative Grid Import: {simulation.cumulativeGridImport.toFixed(2)} kWh</p>\n      <p>Cumulative Grid Export: {simulation.cumulativeGridExport.toFixed(2)} kWh</p>\n      <p>Cumulative House Consumption: {simulation.cumulativeHouseConsumption.toFixed(2)} kWh</p>\n      \n      \n      {/* Graph Section: Only display if timeOfDay > 0 (graph resets at midnight) */}\n      {timeOfDay > 0 && chartData && (\n        <div style={{ width: '700px', height: '700px', marginTop: '20px' }}>\n          <h2>SoC, Cumulative Grid Import & Solar Production Over Time</h2>\n          <Line data={chartData} options={chartOptions} />\n        </div>\n      )}\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}